<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-02-26T16:36:52+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">GRYOH</title><subtitle>어떤 개발자 블로그</subtitle><author><name>GRYOH</name></author><entry><title type="html">함수형 인터페이스란 무엇인가</title><link href="http://localhost:4000/java/java8/2020/02/26/java8_02.html" rel="alternate" type="text/html" title="함수형 인터페이스란 무엇인가" /><published>2020-02-26T13:00:00+09:00</published><updated>2020-02-26T13:00:00+09:00</updated><id>http://localhost:4000/java/java8/2020/02/26/java8_02</id><content type="html" xml:base="http://localhost:4000/java/java8/2020/02/26/java8_02.html">&lt;h1 id=&quot;함수형-인터페이스functional-interface&quot;&gt;함수형 인터페이스(Functional Interface)&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;--함수형-인터페이스란&quot;&gt;- 함수형 인터페이스란&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;함수형 인터페이스는 &lt;strong&gt;단 하나의 추상 메소드만&lt;/strong&gt;이 선언된 인터페이스이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;SAM&lt;/strong&gt;(Single Abstract Method) 인터페이스라고도 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;--함수형-인터페이스-특징&quot;&gt;- 함수형 인터페이스 특징&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;함수형 인터페이스와 람다를 이용하면 구조적으로 유연하고 간결한 코드를 작성할 수 있다.
인터페이스에 &lt;strong&gt;@FunctionalInterface&lt;/strong&gt; 어노테이션을 붙여주면 컴파일에러를 방지할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;--함수형-인터페이스-사용예시&quot;&gt;- 함수형 인터페이스 사용예시&lt;/h4&gt;
&lt;h5 id=&quot;예시-1&quot;&gt;예시 1)&lt;/h5&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeSomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 추상메소드&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GRYOH&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;예시2&quot;&gt;예시2)&lt;/h5&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeSomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 추상메소드&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;예시1&lt;/strong&gt;과 같이 일반 메소드는 작성 가능하다&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;예시1&lt;/strong&gt;과 &lt;strong&gt;예시2&lt;/strong&gt; 방법 모두 가능하지만 &lt;strong&gt;예시2&lt;/strong&gt;를 권고한다.&lt;/p&gt;

&lt;p&gt;(@FunctionalInterface 어노테이션 추가 후 추상메소드 추가하면 컴파일 에러 발생하는 것을 확인 할 수 있다)&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;예시-3&quot;&gt;예시 3)&lt;/h5&gt;
&lt;p&gt;함수형 인터페이스가 아니다 -&amp;gt; 추상메소드는 &lt;strong&gt;한 개만&lt;/strong&gt; 존재해야한다&lt;/p&gt;

&lt;p&gt;컴파일 에러는 발생하지 않지만 함수형 인터페이스를 사용하는 쪽에서 multiple non-overriding abstract methods found in interface xxx 컴파일 에러 발생&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeSomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 추상메소드1&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;	            &lt;span class=&quot;c1&quot;&gt;// 추상메소드2&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GRYOH&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;WelcomeSomething&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;welcomeSomething3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//컴파일 에러&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/java/java8/2020/02/26/java8_03.html&quot;&gt;람다 표현식 공부하러 가기&lt;/a&gt;&lt;/p&gt;</content><author><name>GRYOH</name></author><category term="java" /><category term="java8" /><summary type="html">함수형 인터페이스(Functional Interface) - 함수형 인터페이스란</summary></entry><entry><title type="html">람다 표현식이란 무엇인가</title><link href="http://localhost:4000/java/java8/2020/02/26/java8_03.html" rel="alternate" type="text/html" title="람다 표현식이란 무엇인가" /><published>2020-02-26T13:00:00+09:00</published><updated>2020-02-26T13:00:00+09:00</updated><id>http://localhost:4000/java/java8/2020/02/26/java8_03</id><content type="html" xml:base="http://localhost:4000/java/java8/2020/02/26/java8_03.html">&lt;h1 id=&quot;람다-표현식lambda-expressions&quot;&gt;람다 표현식(Lambda Expressions)&lt;/h1&gt;

&lt;p&gt;함수형 프로그래밍을 하기 위해선 람다 표현식을 알아야 좋다. 람다 함수가 뭔지 알아보자&lt;/p&gt;

&lt;p&gt;람다함수란 프로그래밍 언어에서 사용되는 개념으로 &lt;strong&gt;익명 함수(Anonymous functions)&lt;/strong&gt;를 지칭하는 용어이다.&lt;/p&gt;

&lt;p&gt;현재 사용되고 있는 람다의 근간은 수학과 기초 컴퓨터과학 분야에서의 람다 대수이고
람다 대수는 간단히 말하자면 수학에서 사용하는 함수를 보다 &lt;strong&gt;단순하게 표현하는 방법&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;람다-함수란&quot;&gt;람다 함수란&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;람다 함수는 프로그래밍 언어에서 사용되는 개념으로 &lt;strong&gt;익명 함수(Anonymous functions)&lt;/strong&gt;를 지칭하는 용어이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;람다-함수의-장단점&quot;&gt;람다 함수의 장단점&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;숙련만 된다면 코드를 간결하게 줄일 수 있다.&lt;/li&gt;
      &lt;li&gt;멀티스레드를 활용하여 병렬처리를 할 수 있다.&lt;/li&gt;
      &lt;li&gt;사이드 이팩트가 없다. -&amp;gt; 함수 밖에 있는 값을 변경할 수 없다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;너무 많은 코드를 생략하다보니 가독성이 떨어질 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;이전에-람다-표현법을-사용하지-않을-때&quot;&gt;이전에 람다 표현법을 사용하지 않을 때&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;익명 내부 클래스&lt;/strong&gt;를 사용하여 작성&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args) {
    WelcomeSomething welcomeSomething = new WelcomeSomething() {
        @Override
        public String hello(String name) {
            return name + &quot;님&quot;;
        }
    };
    System.out.println(welcomeSomething.hello(&quot;GRYOH&quot;) + &quot; Welcome&quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;람다-표현식-표현법&quot;&gt;람다 표현식 표현법&lt;/h4&gt;

&lt;p&gt;람다식은 &lt;strong&gt;매개변수 + 실행문&lt;/strong&gt;으로 구성되어 있다&lt;/p&gt;

&lt;p&gt;모양은 () -&amp;gt; {} //매개변수 : () , 실행문 : {}&lt;/p&gt;

&lt;p&gt;첫 괄호에 인터페이스의 매개변수&lt;strong&gt;()&lt;/strong&gt;를 입력하고 &lt;strong&gt;-&amp;gt;&lt;/strong&gt; 를 입력하고 &lt;strong&gt;{}&lt;/strong&gt;안에 실행할 코드를 작성하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeSomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@FunctionalInterface&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WelcomeDefaultSomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;사용법1)
    &lt;ul&gt;
      &lt;li&gt;기본 사용법 : (매개변수 타입) -&amp;gt; {실행문}
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WelcomeSomething welcomeSomething = (String name) -&amp;gt; { return name + &quot;님&quot;; };
System.out.println(welcomeSomething.printName(&quot;GRY&quot;) + &quot; Welcome&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용법2)
    &lt;ul&gt;
      &lt;li&gt;매개변수 타입 생략 : (매개변수) -&amp;gt; {실행문}
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WelcomeSomething welcomeSomething = (name) -&amp;gt; { return name + &quot;님&quot;; };
System.out.println(welcomeSomething.printName(&quot;GRY&quot;) + &quot; Welcome&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용법3)
    &lt;ul&gt;
      &lt;li&gt;매개변수 없는 경우 : () -&amp;gt; {실행문}&lt;/li&gt;
      &lt;li&gt;매개변수가 하나일 경우 매개변수를 생략 할 수 있다
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WelcomeDefaultSomething welcomeDefaultSomething = () -&amp;gt; {
  System.out.println(&quot;임시회원님 Welcome&quot;);
};
welcomeDefaultSomething.hello();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용법4)
    &lt;ul&gt;
      &lt;li&gt;중괄호 생략 : () -&amp;gt; 실행문&lt;/li&gt;
      &lt;li&gt;함수몸체가 단일 실행문이면 괄호{}를 생략 할 수 있다&lt;/li&gt;
      &lt;li&gt;함수몸체가 return문으로만 구성되어 있는 경우 괄호{}를 생략 할 수 없습니다.
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WelcomeDefaultSomething welcomeDefaultSomething = () -&amp;gt; System.out.println(&quot;임시회원님 Welcome&quot;);
welcomeDefaultSomething.hello();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;사용법5)
    &lt;ul&gt;
      &lt;li&gt;매개변수 괄호 생략 : 매개변수 -&amp;gt; 실행문
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WelcomeSomething welcomeSomething = name -&amp;gt; name + &quot;님&quot;;
System.out.println(welcomeSomething.hello(&quot;GRYOH&quot;) + &quot; Welcome&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;익명 내부 클래스로 작성했던 코드보다 훨씬 간결해졌다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/java/java8/2020/02/26/java8_04.html&quot;&gt;Stream API 공부하러가기&lt;/a&gt;&lt;/p&gt;</content><author><name>GRYOH</name></author><category term="java" /><category term="java8" /><summary type="html">람다 표현식(Lambda Expressions)</summary></entry><entry><title type="html">Java8</title><link href="http://localhost:4000/java/java8/2020/02/17/java8_01.html" rel="alternate" type="text/html" title="Java8" /><published>2020-02-17T13:00:00+09:00</published><updated>2020-02-17T13:00:00+09:00</updated><id>http://localhost:4000/java/java8/2020/02/17/java8_01</id><content type="html" xml:base="http://localhost:4000/java/java8/2020/02/17/java8_01.html">&lt;h1 id=&quot;java8&quot;&gt;Java8&lt;/h1&gt;
&lt;p&gt;현재 자바8 버전은 &lt;a href=&quot;https://www.java.com/ko/download/help/release_dates.html&quot;&gt;출시&lt;/a&gt;(2014/03/18) 이후로 개발자들이 가장 많이 사용하는 버전이다.&lt;/p&gt;

&lt;p&gt;&lt;img data-action=&quot;zoom&quot; src=&quot;/img/posts/javaversion_use_graph.png&quot; alt=&quot;자바 버전 사용률 jetbrain참조&quot; style=&quot;width: 70%; display: block; margin: 0 auto;&quot; onclick=&quot;javascript:location.href='https://www.jetbrains.com/lp/devecosystem-2020/java/'&quot; /&gt;&lt;/p&gt;

&lt;p&gt;자바8은 절감된 상용 코드(boilerplate code), 향상된 콜렉션 및 주석, 더 단순화된 병렬 프로그램 모델 및 모뎀, 멀티코어프로세서의 효율적인 사용 구현을 통해 개발자의 생산성 및 주요한 애플리케이션 성능을 강화해준다.&lt;/p&gt;

&lt;p&gt;자바8의 주요 기능은 아래와 같이 다양하다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;람다 표현식 (Lambda expression) - 함수형 프로그래밍이 가능하게 됨&lt;/li&gt;
  &lt;li&gt;스트림 API (Stream API) - 데이터를 추상화하여 다룰 수 있게 됨&lt;/li&gt;
  &lt;li&gt;java.time 패키지 - 더 직관적이고 개선된 Date, Time API를 제공&lt;/li&gt;
  &lt;li&gt;Default Method - 구현 클래스에서 인터페이스를 구현하지 않아도 된다&lt;/li&gt;
  &lt;li&gt;Optional - NullPointerException을 막는다&lt;/li&gt;
  &lt;li&gt;나즈혼(Nashorn) - 자바스크립트 엔진&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자바8에 주요기능은 다양하지만 그중에 나는 람다표현식, 스트림, Optional을 주로 사용 중이다. 하지만 기초없이 사용하다 보니 사용할 때마다 개발리소스가 많이 허비 되는거 같아서 정리를 해보기로 했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/java/java8/2020/02/26/java8_02.html&quot;&gt;함수형 인터페이스 공부하러 가기&lt;/a&gt;&lt;/p&gt;</content><author><name>GRYOH</name></author><category term="java" /><category term="java8" /><summary type="html">Java8 현재 자바8 버전은 출시(2014/03/18) 이후로 개발자들이 가장 많이 사용하는 버전이다.</summary></entry></feed>